"use strict";

let x = 5; alert(x++);
//будет 5 потому что х++ находится после операнда

[] + false - null + true
//1)[] + false - Здесь происходит операция сложения между пустым массивом [] и значением false. В этом случае, пустой массив преобразуется в пустую строку, а затем происходит конкатенация (соединение) строки и значения false. Результат будет строка "false".2)"false" - null - Здесь происходит операция вычитания между строкой "false" и значением null. Поскольку оператор - применяется только к числам, строки и значения null будут автоматически преобразованы в числа. Однако, строка "false" не может быть корректно преобразована в число, поэтому результат будет NaN.3)NaN + true - Здесь происходит операция сложения между NaN и значением true. В этом случае, NaN остается NaN, и результат остается NaN.

let y = 1;
let x = y = 2;
alert(x);
//будет 2

[] + 1 + 2
//тут происходит конкатенация, потому что мы складываем разные типы данных, оба числа будут преобразованы в строки и сложатся в "12"

alert( "1"[0] )
//тут мы обращаемся к первому символу в строке и будет 1

2 && 1 && null && 0 && undefined
//будеь null потому что это первое ложное значение

!!( a && b ) и (a && b)
//разница в том что !!( a && b ) стало буллиновым значением

alert( null || 2 && 3 || 4 );
//будет число 3, потому что && выполняется перед ||

a = [1, 2, 3]; b = [1, 2, 3]; 
//массивы ссылаются на разные разделы памяти так что не будуь равныё

alert( +"Infinity" );
//выведет infinity потому что это значение бесконечности, если будет просто строка то выведет NaN

"Ёжик" > "яблоко"
//В данном случае, при сравнении "Ёжик" и "яблоко", первые символы различаются: "Ё" (Ёжик) имеет больший код Unicode, чем "я" (яблоко). Поэтому результатом выражения "Ёжик" > "яблоко" будет false.

0 || "" || 2 || undefined || true || falsе
//2 потому что это первое истинное значение